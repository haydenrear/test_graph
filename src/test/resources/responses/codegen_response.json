{
  "type": "code",
  "codeResult": {
    "data": [
      {
        "Source code path": "first",
        "Source code with historical diffs": "0 <add>  \n1 package com.hayden.commitdiffcontext.message.embed;  \n2  \n3 <delete>  \n4 // import com.google.auto.value.AutoBuilder; // - commented for history -  \n5 </delete>  \n6 import com.hayden.commitdiffcontext.models.Embedding;  \n7 import com.hayden.proto.datasources.ai.huggingface.client.ModelServerEmbeddingAiClient;  \n8 import com.hayden.proto.datasources.ai.huggingface.request.ModelServerRequest;  \n9 import com.hayden.utilitymodule.result.Result;  \n10 <add>  \n11 import com.hayden.commitdiffcontext.message.embed.support.IdempotentRequestFactory;  \n12 import com.hayden.commitdiffcontext.message.embed.support.RequestObjectFactory;  \n13 import com.hayden.commitdiffcontext.rag.entity.CommitDiff;  \n14 import com.hayden.commitdiffcontext.rag.entity.CommitDiffCluster;  \n15 import com.hayden.commitdiffcontext.rag.entity.CommitDiffItem;\n16 import com.hayden.commitdiffcontext.rag.repo.CommitDiffClusterRepository;\n17 import com.hayden.commitdiffcontext.rag.repo.CommitDiffItemRepository;\n18 import com.hayden.commitdiffcontext.rag.repo.CommitDiffRepository;\n19 import org.springframework.beans.factory.annotation.Autowired;\n20 import org.springframework.stereotype.Component;\n21 import org.springframework.transaction.annotation.Transactional;\n22\n23 import java.util.List;\n24 import java.util.Optional;\n25 import java.util.stream.Collectors;\n26 </add>\n27\n28 @Component\n29 public class ModelServerEmbeddingClient implements EmbeddingClient<ModelServerRequest> {\n30\n31     @Autowired\n32     private ModelServerEmbeddingAiClient embeddingAiClient;\n33     @Autowired\n34     private RequestObjectFactory requestObjectFactory;\n35     @Autowired\n36     private IdempotentRequestFactory idempotentRequestFactory;\n37     @Autowired\n38     private CommitDiffRepository commitDiffRepository;\n39     @Autowired\n40     private CommitDiffItemRepository commitDiffItemRepository;\n41     @Autowired\n42     private CommitDiffClusterRepository commitDiffClusterRepository;\n43\n44     @Override\n45     @Transactional\n46     public Result<Embedding.EmbeddingResponse, EmbeddingError> embed(ModelServerRequest v) {\n47         return embeddingAiClient.send(v)\n48                 .map(m -> new Embedding.EmbeddingResponse(m.embedding().data()))\n49                 .mapError(c -> new EmbeddingError(c.getMessage()));\n50     }\n51\n52     @Override\n53     public Result<Embedding.EmbeddingResponse, EmbeddingError> doEmbed(Object t) {\n54         if (t instanceof ModelServerRequest r) {\n55             return this.embed(r);\n56         }\n57         return Result.err(new EmbeddingError(\"Failed to embed object of type %s - only accept %s.\"\n58                 .formatted(t.getClass(), ModelServerRequest.class)));\n59     }\n60\n61     @Override\n62     public boolean supports(Object t) {\n63         return t instanceof ModelServerRequest;\n64     }\n65\n66     public Result<List<CommitDiffCluster>, EmbeddingError> batchEmbedCommitDiffs(List<CommitDiff> commitDiffs) {\n67         return Result.fromOpt(commitDiffs, new EmbeddingError(\"No commit diffs provided.\"))\n68                 .flatMap(diffs -> {\n69                     var requests = diffs.stream()\n70                             .map(requestObjectFactory::create)\n71                             .collect(Collectors.toList());\n72\n73                     return idempotentRequestFactory.create(requests)\n74                             .map(this::embed)\n75                             .map(r -> r.stream()\n76                                     .map(res -> {\n77                                         var cd = res.r().get();\n78                                         var cluster = new CommitDiffCluster(List.of(cd), cd.getEmbedding(), 0, 0f);\n79                                         return commitDiffClusterRepository.save(cluster);\n80                                     })\n81                                     .toList())\n82                             .mapError(e -> new EmbeddingError(e.getMessage()));\n83                 });\n84     }\n85 }\n86 </add>"
      }
    ]
  }
}